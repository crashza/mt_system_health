#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2014             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# tails. You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

def inventory_mikrotik_system_health(info):
    if info:
        return [('', None)]
    else:
        return None


def check_mikrotik_system_health(item, _no_params, info):
    for voltage, temp, cputemp, powercons, current, cpufreq in info:
        perfdata = []
        summary = ''
        if voltage:
            perfdata.append(('voltage', (float(voltage) / 10)))
            summary += 'Voltage: %s V, ' % (float(voltage) / 10)
        if temp:
            perfdata.append(('temp', (float(temp) / 10)))
            summary += 'Temperature: %sC, ' % (float(temp) / 10)
        if cputemp:
            perfdata.append(('cputemp', (float(cputemp) / 10)))
            summary += 'CPU Temperature: %sC, ' % (float(cputemp) / 10)
        if powercons:
            perfdata.append(('power-consumption', (float(powercons) / 10)))
            summary += 'Power Consumption: %s W, ' % (float(powercons) / 10)
        if current:
            perfdata.append(('current', int(current)))
            summary += 'Current: %s mA, ' % int(current)
        if cpufreq:
            summary += 'CPU Frequency: %s MHz' % cpufreq

        if summary.endswith(', '):
            summary = summary[0:-2]

        return (0, summary, perfdata)
    return (3, 'Invalid data', [])

check_info['mikrotik_system_health'] = {
    'check_function':           check_mikrotik_system_health,
    'inventory_function':       inventory_mikrotik_system_health,
    'service_description':      'System health',
    'group':                    'mikrotik_system_health',
    'has_perfdata':             True
}

snmp_info['mikrotik_system_health'] = (
    '.1.3.6.1.4.1.14988.1.1.3', [
        '8.0',   # voltage
        '10.0',  # temperature
        '11.0',  # cpu-temperature
        '12.0',  # power consumption
        '13.0',  # current
        '14.0',  # cpu frequency
    ]
)

snmp_scan_functions['mikrotik_system_health'] = \
    lambda oid: oid('.1.3.6.1.4.1.14988.1.1.3.*') is not None
